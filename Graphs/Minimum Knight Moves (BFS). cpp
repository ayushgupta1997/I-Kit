#include <bits/stdc++.h>
int Solution::knight(int n, int m, int x1, int y1, int x2, int y2) {
    bool vis[n+1][m+1];
    int dx[] = {-2, -1, 1, 2, -2, -1, 1, 2}; 
    int dy[] = {-1, -2, -2, -1, 1, 2, 2, 1}; 
    for (int i=1; i <= n; i++) {
        for (int j=1; j <=m; j++) {
            vis[i][j]=false;
        }
    }
    queue<pair<int,pair<int,int>>> q;
    q.push(make_pair(0,make_pair(x1,y1)));
    vis[x1][y1] = true;
    while(!q.empty()) {
        pair<int, pair<int,int>> p = q.front();
        int x = p.second.first;
        int y = p.second.second;
        if(x2 == x && y2==y) {
            return p.first;
        }
        q.pop();
        for (int i = 0; i < 8; i++) {
            int xx = x+dx[i];
            int yy = y+dy[i];
            if(xx >= 1 && xx<=n && yy>=1 && yy<=m && !vis[xx][yy]) {
                vis[xx][yy] = true;
                q.push(make_pair(p.first+1, make_pair(xx,yy)));
            }
        }
        
    }
    return -1;
    
    
    
}
